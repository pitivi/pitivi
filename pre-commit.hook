#!/usr/bin/env bash

# This is symlinked from .git/hooks/pre-commit when entering
# the dev env with `source bin/pitivi-env`.

if [ -z "${PITIVI_REPO_DIR}" ]; then
    echo "ERROR: You're not in the Pitivi development environment. Run `source bin/pitivi-env` to enter it. See http://developer.pitivi.org/HACKING.html for details."
    exit 1
fi

TOPLEVEL=$(git rev-parse --show-toplevel)
export PYTHONPATH=$TOPLEVEL/pitivi/coptimizations/.libs:$PYTHONPATH

PYLINT_IGNORED_FILES="
bin/pitivi.in
pitivi/autoaligner.py
pitivi/editorperspective.py
pitivi/effects.py
pitivi/mediafilespreviewer.py
pitivi/medialibrary.py
pitivi/preset.py
pitivi/project.py
pitivi/render.py
pitivi/settings.py
pitivi/timeline/elements.py
pitivi/timeline/timeline.py
pitivi/titleeditor.py
pitivi/transitions.py
pitivi/undo/timeline.py
pitivi/utils/extract.py
pitivi/utils/loggable.py
pitivi/utils/misc.py
pitivi/utils/pipeline.py
pitivi/utils/proxy.py
pitivi/utils/ui.py
pitivi/utils/validate.py
pitivi/utils/widgets.py
pitivi/viewer/move_scale_overlay.py
pitivi/viewer/overlay_stack.py
pitivi/viewer/viewer.py
tests/common.py
tests/test_log.py
tests/test_medialibrary.py
tests/test_preset.py
tests/test_project.py
tests/test_timeline_timeline.py
tests/test_undo.py
tests/test_undo_timeline.py
"

PYLINT_IGNORE_ARGS=""
for f in $PYLINT_IGNORED_FILES; do
    PYLINT_IGNORE_ARGS="$PYLINT_IGNORE_ARGS --ignore=$f"
done

# Print the commands being executed so we have a clue what's going on.
set -x

# Lightweight pre-commit.com checks.
pre-commit run --config .pre-commit-config.yaml || exit 1

# We keep pylint separate from the pre-commit.com hooks
# because we have to run it in the sandbox. This is done
# through git-pylint-commit-hook and pitivi-flatpak.
git-pylint-commit-hook --pylint="$TOPLEVEL/build/flatpak/pitivi-flatpak" \
  --pylint-params="pylint" --pylintrc="$TOPLEVEL/pylint.rc" \
  --limit=10.0 $PYLINT_IGNORE_ARGS --suppress-report || exit 1
